CREATE DATABASE CEO;
USE CEO;

-- Tabela VolunteerWork (Opcionalmente relacionada a User)
CREATE TABLE VolunteerWork (
    idVolunteerWork INT PRIMARY KEY AUTO_INCREMENT,
    nameVolunteerWork VARCHAR(255),
    address VARCHAR(255),
    dateVolunteerWork DATETIME, 
    work_description VARCHAR(255),
    date_at_create DATETIME DEFAULT CURRENT_TIMESTAMP
);

-- Tabela Book
CREATE TABLE Book (
    idLibrary INT AUTO_INCREMENT PRIMARY KEY,
    nameBook VARCHAR(255),
    author VARCHAR(255),
    overviewBook TEXT,
    curiosityBook TEXT,
    tagsBook ENUM('Obras Básicas', 'Obras Complementares',),
    date_aquisition DATETIME DEFAULT CURRENT_TIMESTAMP,
    status_Available ENUM('disponível', 'reservado', 'emprestado', 'indisponível') NOT NULL
);

-- Tabela User
CREATE TABLE User (
    idUser INT AUTO_INCREMENT PRIMARY KEY,
    nameUser VARCHAR(255) NOT NULL,
    email VARCHAR(255) NOT NULL,
    password VARCHAR(255) NOT NULL,
    image_profile TEXT,
    status_permission ENUM('SuperAdmin', 'Admin', 'User'),
    date_at_create DATETIME DEFAULT CURRENT_TIMESTAMP
);

-- Tabela Loans
CREATE TABLE Loans (
    idLoans INT AUTO_INCREMENT PRIMARY KEY,
    returnDate DATETIME,
    date_at_create DATETIME DEFAULT CURRENT_TIMESTAMP,
    Cart_idCart INT NOT NULL,
    FOREIGN KEY (Cart_idCart) REFERENCES Cart(idCart)
);

-- Tabela Reserves
CREATE TABLE Reserves (
    idReserved INT AUTO_INCREMENT PRIMARY KEY,
    reserveDate DATETIME DEFAULT CURRENT_TIMESTAMP,
    Cart_idCart INT NOT NULL,
    FOREIGN KEY (Cart_idCart) REFERENCES Cart(idCart)
);

-- Tabela Cart (Carrinho)
CREATE TABLE Cart (
    idCart INT AUTO_INCREMENT PRIMARY KEY,
    User_idUser INT NOT NULL,
    Book_idLibrary INT NOT NULL,
    action ENUM('reservar', 'emprestar') NOT NULL,
    added_at DATETIME DEFAULT CURRENT_TIMESTAMP,
    FOREIGN KEY (User_idUser) REFERENCES User(idUser),
    FOREIGN KEY (Book_idLibrary) REFERENCES Book(idLibrary)
);

-- Tabela Post
CREATE TABLE Post (
    idPost INT AUTO_INCREMENT PRIMARY KEY,
    content TEXT NOT NULL,
    image TEXT,
    created_at DATETIME DEFAULT CURRENT_TIMESTAMP,
    User_idUser INT NOT NULL,
    Topic_idTopic INT NOT NULL,
    FOREIGN KEY (User_idUser) REFERENCES User(idUser),
    FOREIGN KEY (Topic_idTopic) REFERENCES Topic(idTopic)
);

-- Tabela Comments
CREATE TABLE Comments (
    idComments INT AUTO_INCREMENT PRIMARY KEY,
    Post_idPost INT NOT NULL,
    User_idUser INT NOT NULL,
    message TEXT NOT NULL,
    createdDate DATETIME DEFAULT CURRENT_TIMESTAMP,
    FOREIGN KEY (Post_idPost) REFERENCES Post(idPost),
    FOREIGN KEY (User_idUser) REFERENCES User(idUser)
);


-- Tabela Likes
CREATE TABLE Likes (
    idLikes INT AUTO_INCREMENT PRIMARY KEY,
    Post_idPost INT NOT NULL,
    User_idUser INT NOT NULL,
    created_at DATETIME DEFAULT CURRENT_TIMESTAMP,
    FOREIGN KEY (Post_idPost) REFERENCES Post(idPost),
    FOREIGN KEY (User_idUser) REFERENCES User(idUser)
);

-- Tabela Lecture
CREATE TABLE Lecture (
    idLecture INT AUTO_INCREMENT PRIMARY KEY,
    nameLecture VARCHAR(255),
    dateLecture datetime,
    timeLecture time,
    description varchar(255),
    link_url varchar(255),
    video_url TEXT,
    created_at DATETIME DEFAULT CURRENT_TIMESTAMP

);



-- Tabela Topic
CREATE TABLE Topic (
    idTopic INT AUTO_INCREMENT PRIMARY KEY,
    title VARCHAR(255) NOT NULL,
    description VARCHAR(255) NOT NULL,
    image TEXT,
    User_idUser INT NOT NULL,
    created_at DATETIME DEFAULT CURRENT_TIMESTAMP,
    FOREIGN KEY (User_idUser) REFERENCES User(idUser)
);

-- Tabela CalendarEvents
CREATE TABLE CalendarEvents (
    idCalendarEvents INT AUTO_INCREMENT PRIMARY KEY,
    title VARCHAR(255),
    link VARCHAR(255),
    description TEXT NOT NULL,
    start DATETIME DEFAULT CURRENT_TIMESTAMP NOT NULL,
    end DATETIME DEFAULT CURRENT_TIMESTAMP NOT NULL,
    attachment TEXT,
    User_idUser INT NOT NULL,
    FOREIGN KEY (User_idUser) REFERENCES User(idUser)
);

-- Tabela Facilitadores
CREATE TABLE Facilitadores (
    idFacilitadores INT AUTO_INCREMENT PRIMARY KEY,
    User_idUser INT NOT NULL,
    description VARCHAR(255) NOT NULL,
    apelido VARCHAR(255) NOT NULL,
    espiritaSinceTime INT NOT NULL,
    memberSinceWhen DATETIME,
    category ENUM('ESDE', 'CIEDE', 'MEDIUNIDADE') NOT NULL,
    FOREIGN KEY (User_idUser) REFERENCES User(idUser)
);

-- Tabela Notifications
CREATE TABLE Notifications (
    idNotifications INT AUTO_INCREMENT PRIMARY KEY,
    message VARCHAR(255) NOT NULL,
    isRead BOOLEAN NOT NULL DEFAULT FALSE,
    created_at DATETIME DEFAULT CURRENT_TIMESTAMP,
    User_idUser INT NOT NULL,
    FOREIGN KEY (User_idUser) REFERENCES User(idUser)
);

-- Tabela OTP (para verificação)
CREATE TABLE OTP (
    idOtp INT AUTO_INCREMENT PRIMARY KEY,
    email VARCHAR(255) NOT NULL,
    otp varchar(255) not null,
    createdAt TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    expiresAt TIMESTAMP NOT NULL
);

SELECT * FROM User;

CREATE EVENT deleteExpiredOtp
on schedule every 10 minute
DO DELETE FROM OTP WHERE expiresAt < now();

